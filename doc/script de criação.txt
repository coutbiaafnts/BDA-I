-- script de criação
begin;

create table usuario (
	id_usuario serial not null primary key,
	nome varchar(255),
	email varchar(255),
	senha varchar(255),
	cpf varchar(11),
	data_nasc date,
	cargo varchar(255),
	salario decimal(10,2),
	rua varchar(255),
	numero varchar(255),
	bairro varchar(255),
	cidade varchar(255),
	estado varchar(255),
	cep varchar(255),
	data_cad_us timestamp
);

create table cliente (
	id_cliente serial not null primary key,
	nome varchar(255),
	cpf varchar(11),
	cnpj varchar(14),
	telefone varchar(255),
	email varchar(255),
	frequencia int,
	rua varchar(255),
	numero varchar(255),
	bairro varchar(255),
	estado varchar(255),
	cep varchar(255),
	data_cad_cli timestamp
);

-- tabela resultado do script .sql tabela_cliente_frequente mínimo de (5) compras em dias diferentes
create table cliente_frequente (
	id_cliente_fr serial not null primary key,
	id_cliente int,
	nome varchar(255),
	qtd_frequencia int,
	desconto decimal(10,2),
	foreign key(id_cliente) references cliente(id_cliente)
);

create table fornecedor (
	id_fornecedor serial not null primary key,
	nome varchar(255),
	telefone varchar(255),
	email varchar(255),
	cnpj varchar(255),
	rua varchar(255),
	numero varchar(255),
	bairro varchar(255),
	cidade varchar(255),
	estado varchar(255),
	cep varchar(255),
	data_cad_forn timestamp
);

create table produto (
	id_produto serial not null primary key,
	nome varchar(255),
	categoria varchar(255),
	quantidade_estq int,
	quantidade_min int,
	quantidade_perdida int, 
	preco_venda decimal(10,2),
	preco_compra decimal(10,2),
	data_cad_prod timestamp
);

create table fornecimento (
	id_fornecimento serial not null primary key,
	id_fornecedor int,
	id_produto int,
	foreign key(id_fornecedor) references fornecedor(id_fornecedor),
	foreign key(id_produto) references produto(id_produto)
);

-- tabela resultado do script .sql tabela_relatorio_estq
create table relatorio_estq (
	id_relatorio_estq serial not null primary key,
	id_produto int,
	id_usuario int,
	nome_usuario varchar(255),
	prod_men_vend varchar(255),
	prod_mais_vend varchar(255),
	prod_falta varchar(255),
	prod_baixo_estq varchar(255),
	data_relatorio timestamp,
	foreign key(id_produto) references produto(id_produto),
	foreign key(id_usuario) references usuario(id_usuario)
);

-- tabela resultado do script .sql tabela_comprovante
create table comprovante (
	id_comprovante serial not null primary key,
	nome_cliente varchar(255),
	cpf_cliente varchar(255),
	cnpj_cliente varchar(255),
	telefone_cliente varchar(255),
	id_produto int, -- puxa da coluna id_produto da tabela item_venda
	produto varchar(255), -- puxa da coluna nome da tabela produto
	quantidade int, -- puxa da coluna quantidade da tabela item_venda
	valor_item decimal(10,2), -- puxa da coluna preco_venda da tabela produto
	valor_total decimal(10,2), -- valor total de cada item
	valor_compra decimal(10,2), -- soma dos valores totais
	forma_pagamento varchar(255), -- puxa da coluna forma_pagamento da tabela venda
	data_emissao timestamp
);

create table item_venda (
	id_item serial not null primary key,
	id_produto int,
	quantidade int,
	foreign key(id_produto) references produto(id_produto)
);

-- tabela resultado do script .sql tabela_relatorio_finan
create table relatorio_finan (
	id_relatorio_finan serial not null primary key,
	id_usuario int,
	nome_usuario varchar(255),
	total_vendido decimal(10,2),
	total_receber decimal(10,2),
	total_caixa decimal(10,2),
	data_relatorio timestamp,
	foreign key(id_usuario) references usuario(id_usuario)
);

create table venda (
	id_venda serial not null primary key,
	id_item int,
	id_relatorio_finan int,
	id_usuario int,
	id_cliente int,
	id_comprovante int,
	total decimal(10,2), 
	forma_pagamento varchar(255), -- dinheiro, pix, crédito e débito
	data_venda timestamp,
	foreign key(id_item) references item_venda(id_item),
	foreign key(id_relatorio_finan) references relatorio_finan(id_relatorio_finan),
	foreign key(id_usuario) references usuario(id_usuario),
	foreign key(id_cliente) references cliente(id_cliente),
	foreign key(id_comprovante) references comprovante(id_comprovante)
);

create table despesas (
	id_despesa serial not null primary key,
	id_relatorio_finan int,
	nome varchar(255),
	descricao varchar(255),
	categoria varchar(255), -- variável, fixa 
	valor decimal(10,2),
	data_vencimento date,
	data_pagamento date,
	foreign key(id_relatorio_finan) references relatorio_finan(id_relatorio_finan)
);

commit;

-- insert dos dados
INSERT INTO
  usuario (
    nome,
    email,
    senha,
    cpf,
    data_nasc,
    cargo,
    salario,
    rua,
    numero,
    bairro,
    cidade,
    estado,
    cep,
    data_cad_us
  )
VALUES
  (
    'Ana Souza',
    'ana.souza@example.com',
    'senha123',
    '12345678901',
    '1985-06-15',
    'Gerente',
    7500.00,
    'Rua das Flores',
    '123',
    'Centro',
    'São Paulo',
    'SP',
    '01001-000',
    '2024-06-09 10:00:00'
  ),
  (
    'Carlos Silva',
    'carlos.silva@example.com',
    'senha123',
    '23456789012',
    '1990-08-22',
    'Analista',
    5000.00,
    'Avenida Paulista',
    '456',
    'Bela Vista',
    'São Paulo',
    'SP',
    '01310-000',
    '2024-06-09 11:00:00'
  ),
  (
    'Mariana Lima',
    'mariana.lima@example.com',
    'senha123',
    '34567890123',
    '1992-11-05',
    'Desenvolvedor',
    6000.00,
    'Rua Augusta',
    '789',
    'Consolação',
    'São Paulo',
    'SP',
    '01305-000',
    '2024-06-09 12:00:00'
  );

INSERT INTO
  cliente (
    nome,
    cpf,
    cnpj,
    telefone,
    email,
    frequencia,
    rua,
    numero,
    bairro,
    estado,
    cep,
    data_cad_cli
  )
VALUES
  (
    'João Pereira',
    '45678901234',
    NULL,
    '11987654321',
    'joao.pereira@example.com',
    6,
    'Rua da Paz',
    '101',
    'Liberdade',
    'SP',
    '01503-001',
    '2024-06-09 09:00:00'
  ),
  (
    'Empresa ABC Ltda',
    NULL,
    '12345678000199',
    '1134567890',
    'contato@empresaabc.com',
    3,
    'Rua do Comércio',
    '202',
    'Centro',
    'SP',
    '01002-000',
    '2024-06-09 09:30:00'
  ),
  (
    'Maria Oliveira',
    '56789012345',
    NULL,
    '11912345678',
    'maria.oliveira@example.com',
    8,
    'Rua das Acácias',
    '303',
    'Jardins',
    'SP',
    '01403-002',
    '2024-06-09 10:00:00'
  );

INSERT INTO
  cliente_frequente (id_cliente, nome, qtd_frequencia, desconto)
VALUES
  (1, 'João Pereira', 6, 10),
  (3, 'Maria Oliveira', 8, 15);

INSERT INTO
  fornecedor (
    nome,
    telefone,
    email,
    cnpj,
    rua,
    numero,
    bairro,
    cidade,
    estado,
    cep,
    data_cad_forn
  )
VALUES
  (
    'Fornecedor XYZ',
    '1123456789',
    'contato@fornecedorxyz.com',
    '98765432000188',
    'Avenida do Progresso',
    '404',
    'Zona Industrial',
    'São Paulo',
    'SP',
    '01103-003',
    '2024-06-09 13:00:00'
  ),
  (
    'Distribuidora Alpha',
    '1123456790',
    'vendas@alpha.com',
    '87654321000177',
    'Rua das Indústrias',
    '505',
    'Distrito Industrial',
    'São Paulo',
    'SP',
    '01104-004',
    '2024-06-09 13:30:00'
  );

INSERT INTO
  produto (
    nome,
    categoria,
    quantidade_estq,
    quantidade_min,
    quantidade_perdida,
    preco_venda,
    preco_compra,
    data_cad_prod
  )
VALUES
  (
    'Produto A',
    'Eletrônicos',
    50,
    10,
    2,
    199.99,
    150.00,
    '2024-06-09 14:00:00'
  ),
  (
    'Produto B',
    'Vestuário',
    30,
    5,
    1,
    49.99,
    30.00,
    '2024-06-09 14:30:00'
  ),
  (
    'Produto C',
    'Alimentos',
    100,
    20,
    5,
    9.99,
    5.00,
    '2024-06-09 15:00:00'
  );

INSERT INTO
  fornecimento (id_fornecedor, id_produto)
VALUES
  (1, 1),
  (1, 2),
  (2, 3);

INSERT INTO
  relatorio_estq (
    id_produto,
    id_usuario,
    prod_men_vend,
    prod_mais_vend,
    prod_falta,
    prod_baixo_estq,
    data_relatorio
  )
VALUES
  (
    1,
    1,
    'Produto C',
    'Produto A',
    'Produto B',
    'Produto B',
    '2024-06-09 16:00:00'
  );

INSERT INTO
  comprovante (
    nome_cliente,
    cpf_cliente,
    cnpj_cliente,
    telefone_cliente,
    id_produto,
    produto,
    quantidade,
    valor_item,
    valor_total,
    valor_compra,
    forma_pagamento,
    data_emissao
  )
VALUES
  (
    'João Pereira',
    '45678901234',
    NULL,
    '11987654321',
    1,
    'Produto A',
    2,
    199.99,
    399.98,
    399.98,
    'crédito',
    '2024-06-09 17:00:00'
  );

INSERT INTO
  item_venda (id_produto, quantidade)
VALUES
  (1, 2),
  (2, 1),
  (3, 5);

INSERT INTO
  relatorio_finan (
    id_usuario,
    nome_usuario,
    total_vendido,
    total_receber,
    total_caixa,
    data_relatorio
  )
VALUES
  (
    1,
    'Ana Souza',
    1000.00,
    500.00,
    1500.00,
    '2024-06-09 18:00:00'
  );

INSERT INTO
  venda (
    id_item,
    id_relatorio_finan,
    id_usuario,
    id_cliente,
    id_comprovante,
    total,
    forma_pagamento,
    data_venda
  )
VALUES
  (
    1,
    1,
    1,
    1,
    1,
    399.98,
    'crédito',
    '2024-06-09 17:30:00'
  );

INSERT INTO
  despesas (
    id_relatorio_finan,
    nome,
    descricao,
    categoria,
    valor,
    data_vencimento,
    data_pagamento
  )
VALUES
  (
    1,
    'Aluguel',
    'Aluguel mensal da loja',
    'fixa',
    2000.00,
    '2024-06-30',
    '2024-06-05'
  );

-- tabela de comprovante
SELECT
  cliente.nome as nome_cliente,
  cliente.cpf as cpf_cliente,
  cliente.cnpj as cnpj_cliente,
  cliente.telefone as telefone_cliente,
  item_venda.id_produto as id_produto,
  produto.nome as produto,
  item_venda.quantidade as quantidade_produto,
  produto.preco_venda as valor_item,
  SUM(produto.preco_venda * item_venda.quantidade) as valor_total,
  SUM(valor_total) as valor_compra
FROM
  venda
  JOIN comprovante ON comprovante.id_comprovante = venda.id_comprovante
  JOIN item_venda ON venda.ID_item = item_venda.id_item
  JOIN cliente ON venda.id_cliente = cliente.id_cliente
  JOIN produto ON item_venda.id_produto = produto.id_produto
GROUP BY
  cliente.nome,
  cliente.cpf,
  cliente.cnpj,
  cliente.telefone,
  item_venda.id_produto,
  produto.nome,
  item_venda.quantidade,
  produto.preco_venda;

-- tabela de cliente frequente
  SELECT
	cliente_frequente.id_cliente_fr,
	cliente.id_cliente as id_cliente,
	cliente.nome as nome,
	COUNT(DISTINCT DATE(venda.data_venda)) as qtd_frequencia,
	desconto
FROM 
	cliente_frequente
	JOIN cliente ON cliente.id_cliente = cliente_frequente.id_cliente
	JOIN venda ON cliente.id_cliente = venda.id_cliente
GROUP BY
	cliente_frequente.id_cliente_fr,
	cliente.id_cliente,
	cliente.nome
HAVING
  	COUNT(DISTINCT DATE(venda.data_venda)) > 5;

-- produto mais vendido
SELECT
  produto.nome AS produto,
  SUM(item_venda.quantidade) AS total_vendido
FROM
  produto
  JOIN item_venda ON produto.id_produto = item_venda.id_produto
GROUP BY
  produto.nome
ORDER BY
  total_vendido DESC
LIMIT
  1;

-- produto menos vendido
SELECT
  produto.nome AS produto,
  SUM(item_venda.quantidade) AS total_vendido
FROM
  produto
  JOIN item_venda ON produto.id_produto = item_venda.id_produto
GROUP BY
  produto.nome
ORDER BY
  total_vendido ASC
LIMIT
  1;

-- vendas feitas por usuário
SELECT
  usuario.nome
  COUNT(venda.id_venda)
FROM venda
JOIN usuario ON
  usuario.id_usuario = venda.id_usuario
GROUP BY
  usuario.nome;